permissions:
  contents: write
name: CI for NKS via ArgoCD with Blue/Green

on:
  push:
    branches:
      - 'main'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
          fetch-depth: 0

      - name: 프로젝트 빌드 (Jar 생성)
        run: ./gradlew clean build --no-daemon

      - name: NCP 레지스트리 로그인
        uses: docker/login-action@v2
        with:
          registry: mindle.kr.ncr.ntruss.com
          username: ${{ secrets.NCP_ACCESS_KEY }}
          password: ${{ secrets.NCP_SECRET_KEY }}

      - name: QEMU 설치 (멀티플랫폼 지원)
        uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/amd64

      - name: Buildx 설치
        uses: docker/setup-buildx-action@v2

      - name: 이미지 빌드 및 푸시
        env:
          IMAGE_TAG: "1.0.${{ github.run_number }}"
        run: |
          docker buildx build \
            --platform linux/amd64 \
            -t mindle.kr.ncr.ntruss.com/my-spring-app:$IMAGE_TAG \
            --push \
            .

      #  새로 추가된 Blue/Green 배포 로직
      - name: kubectl 설치
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: NCP NKS 클러스터 연결 설정
        run: |
          # NCP NKS kubeconfig 설정 (NCP CLI 사용 또는 직접 설정)
          # 여기에 NCP NKS 연결 설정을 추가하세요
          echo "Kubernetes cluster connection setup..."
          kubectl version --client

      - name: Blue/Green 배포 대상 환경 확인
        env:
          IMAGE_TAG: "1.0.${{ github.run_number }}"
        run: |
          # 현재 서비스가 가리키는 색상 확인
          CURRENT_COLOR=$(kubectl get service spring-svc -o jsonpath='{.spec.selector.color}' 2>/dev/null || echo "blue")
          
          if [ "$CURRENT_COLOR" = "blue" ]; then
            TARGET_COLOR="green"
          else
            TARGET_COLOR="blue"
          fi
          
          echo "현재 활성 환경: $CURRENT_COLOR"
          echo "배포 대상 환경: $TARGET_COLOR"
          echo "새 이미지: mindle.kr.ncr.ntruss.com/my-spring-app:$IMAGE_TAG"
          
          echo "TARGET_COLOR=$TARGET_COLOR" >> $GITHUB_ENV

      - name: 비활성 환경에 새 이미지 배포
        env:
          IMAGE_TAG: "1.0.${{ github.run_number }}"
        run: |
          echo " $TARGET_COLOR 환경에 새 버전 배포 시작..."
          
          # kubectl로 이미지 업데이트
          kubectl set image deployment/spring-app-$TARGET_COLOR \
            spring=mindle.kr.ncr.ntruss.com/my-spring-app:$IMAGE_TAG
          
          echo "⏳ $TARGET_COLOR 환경 배포 상태 확인 중..."
          
          # 배포 완료 대기 (최대 10분)
          kubectl rollout status deployment/spring-app-$TARGET_COLOR --timeout=600s
          
          echo " $TARGET_COLOR 환경 배포 완료!"

      - name: 새 환경 헬스체크
        run: |
          echo "🔍 $TARGET_COLOR 환경 헬스체크 중..."
          
          # Pod가 Ready 상태가 될 때까지 대기 (최대 5분)
          kubectl wait --for=condition=ready pod \
            -l app=spring-app,color=$TARGET_COLOR \
            --timeout=300s
          
          # Pod 상태 확인
          echo " $TARGET_COLOR 환경 Pod 상태:"
          kubectl get pods -l app=spring-app,color=$TARGET_COLOR
          
          echo " $TARGET_COLOR 환경이 정상 동작 중입니다!"

      - name: 배포 완료 안내
        env:
          IMAGE_TAG: "1.0.${{ github.run_number }}"
        run: |
          echo " Blue/Green 배포 완료!"
          echo ""
          echo " 배포 정보:"
          echo "   • 새 이미지: mindle.kr.ncr.ntruss.com/my-spring-app:$IMAGE_TAG"
          echo "   • 배포 환경: $TARGET_COLOR"
          echo "   • 현재 트래픽은 여전히 기존 환경으로 가고 있습니다"
          echo ""
          echo " 트래픽 전환을 원하시면 다음 명령어를 실행하세요:"
          echo "   kubectl patch service spring-svc -p '{\"spec\":{\"selector\":{\"color\":\"$TARGET_COLOR\"}}}'"
          echo ""
          echo " 롤백이 필요하시면 다음 명령어를 실행하세요:"
          CURRENT_COLOR=$(kubectl get service spring-svc -o jsonpath='{.spec.selector.color}')
          echo "   kubectl patch service spring-svc -p '{\"spec\":{\"selector\":{\"color\":\"$CURRENT_COLOR\"}}}'"

      #  YAML 매니페스트 업데이트 (ArgoCD GitOps를 위해)
      - name: yq 설치
        run: |
          wget https://github.com/mikefarah/yq/releases/download/v4.46.1/yq_linux_amd64 -O yq
          chmod +x yq
          sudo mv yq /usr/local/bin/yq

      - name: 매니페스트 파일 업데이트 (GitOps)
        env:
          IMAGE_TAG: "1.0.${{ github.run_number }}"
        run: |
          # 배포된 환경의 YAML 파일 업데이트
          if [ "$TARGET_COLOR" = "blue" ]; then
            DEPLOYMENT_FILE="spring-app-blue-deployment.yaml"
          else
            DEPLOYMENT_FILE="spring-app-green-deployment.yaml"
          fi
          
          # 해당 deployment 파일이 있으면 업데이트
          if [ -f "$DEPLOYMENT_FILE" ]; then
            yq e -i \
              '.spec.template.spec.containers[0].image = "mindle.kr.ncr.ntruss.com/my-spring-app:'"$IMAGE_TAG"'"' \
              $DEPLOYMENT_FILE
            echo " $DEPLOYMENT_FILE 업데이트 완료"
          else
            echo "  $DEPLOYMENT_FILE 파일을 찾을 수 없습니다"
          fi

      - name: 변경사항 커밋 및 푸시
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          IMAGE_TAG: "1.0.${{ github.run_number }}"
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          
          # 변경된 파일이 있는지 확인
          if git diff --quiet; then
            echo " 변경된 매니페스트 파일이 없습니다"
          else
            git add .
            git commit -m "ci: deploy image $IMAGE_TAG to $TARGET_COLOR environment"
            git pull --rebase origin ${{ github.ref_name }}
            git push
            echo " GitOps 매니페스트 업데이트 완료"
          fi
      - name: NCP NKS 클러스터 연결 설정
        run: |
          # Option 1: NCP CLI 사용
          # ncp-iam-authenticator나 NCP CLI로 kubeconfig 설정
          
          # Option 2: 직접 kubeconfig 설정
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config
          
          # 연결 테스트
          kubectl cluster-info
          kubectl get nodes
